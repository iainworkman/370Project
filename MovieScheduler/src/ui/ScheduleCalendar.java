package ui;

import businessobjects.Schedule;
import java.awt.BorderLayout;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;

/**
 * UI class representing a visual calendar representation of the Schedule
 *
 * @author Iain Workman
 */
public class ScheduleCalendar extends javax.swing.JPanel {

    /**
     * Creates new form ScheduleCalendar
     */
    public ScheduleCalendar() {
        initComponents();
        calendarMonth = new CalendarMonth();
        calendarPanel.add(calendarMonth, BorderLayout.CENTER);
        currentDateDisplayed = new GregorianCalendar();
        currentDateDisplayed.set(Calendar.DAY_OF_MONTH, 01);
        dateFormatter = new SimpleDateFormat("MMMM YYYY");
        currentDateLabel.setText(
                dateFormatter.format(currentDateDisplayed.getTime()));
        deleteListeners = new ArrayList<>();
        calendarMonth.addDeleteActionListener(new DeleteFilmingDateActionListener() {

            @Override
            public void deleteActionPerformed(DeleteFilmingDateEvent e) {
                for (DeleteFilmingDateActionListener listener : deleteListeners) {
                    listener.deleteActionPerformed(e);
                }
            }

        });
    }

    /**
     * Sets the date of focus for the ScheduleCalendar
     *
     * @param year::int the year to display on the ScheduleCalendar
     * @param month::int the month to display on the ScheduleCalendar NOTE: Java
     * indexes month from 00 ie. 0=Jan, 1=Feb, 2=Mar, ... , 10=Nov, 11=Dec
     */
    public void setDate(int year, int month) {
        currentDateDisplayed = new GregorianCalendar(year, month, 01);
        calendarMonth.setDate(year, month);
        currentDateLabel.setText(
                dateFormatter.format(currentDateDisplayed.getTime()));
    }

    /**
     * Adds a DeleteFilmingDateActionListener to this item. Added listeners will
     * be informed when the delete action is performed on a SceneFilmingDate
     *
     * @param listener::DeleteFilmingDateActionListener ~ The listener to add
     */
    public void addDeleteActionListener(DeleteFilmingDateActionListener listener) {
        deleteListeners.add(listener);
    }

    /**
     * Removes a DeleteFilmingDateActionListener from this item.
     *
     * @param listener::DeleteFilmingDateActionListener ~ The listener to remove
     */
    public void removeDeleteActionListener(DeleteFilmingDateActionListener listener) {
        deleteListeners.remove(listener);
    }

    /**
     * Sets the Schedule that this ScheduleCalendar is to visualize.
     *
     * @param schedule::Schedule ~ The schedule to display
     */
    public void setSchedule(Schedule schedule) {
        calendarMonth.setSchedule(schedule);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        topPanel = new javax.swing.JPanel();
        currentDateLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        calendarPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        currentDateLabel.setText("CurrentDate");

        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Back.png"))); // NOI18N
        backButton.setBorder(null);
        backButton.setContentAreaFilled(false);
        backButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                backButtonActionPerformed(evt);
            }
        });

        nextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Next.png"))); // NOI18N
        nextButton.setBorder(null);
        nextButton.setContentAreaFilled(false);
        nextButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        nextButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                nextButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextButton)
                .addContainerGap(434, Short.MAX_VALUE))
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(nextButton)
                    .addComponent(backButton)
                    .addComponent(currentDateLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(topPanel, java.awt.BorderLayout.PAGE_START);

        mainPanel.setLayout(new java.awt.GridLayout());

        calendarPanel.setBackground(new java.awt.Color(255, 255, 255));
        calendarPanel.setLayout(new java.awt.BorderLayout());
        mainPanel.add(calendarPanel);

        add(mainPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_backButtonActionPerformed
    {//GEN-HEADEREND:event_backButtonActionPerformed
        currentDateDisplayed.add(Calendar.MONTH, -1);
        calendarMonth.setDate(currentDateDisplayed.get(Calendar.YEAR),
                currentDateDisplayed.get(Calendar.MONTH));
        currentDateLabel.setText(
                dateFormatter.format(currentDateDisplayed.getTime()));
    }//GEN-LAST:event_backButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_nextButtonActionPerformed
    {//GEN-HEADEREND:event_nextButtonActionPerformed
        currentDateDisplayed.add(Calendar.MONTH, 1);
        calendarMonth.setDate(currentDateDisplayed.get(Calendar.YEAR),
                currentDateDisplayed.get(Calendar.MONTH));
        currentDateLabel.setText(
                dateFormatter.format(currentDateDisplayed.getTime()));
    }//GEN-LAST:event_nextButtonActionPerformed

    // Private Member Variables
    private GregorianCalendar currentDateDisplayed;
    private final CalendarMonth calendarMonth;
    private final SimpleDateFormat dateFormatter;
    private ArrayList<DeleteFilmingDateActionListener> deleteListeners;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JPanel calendarPanel;
    private javax.swing.JLabel currentDateLabel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton nextButton;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}
